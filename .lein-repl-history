(for [x (range 10)] "tr")
(for [x (range 10)] "<tr>")
(for [x (range 10)] "<td></td>")
(def td [n] (for [x (range n)] "<td></td>"))
(defn td [n] (for [x (range n)] "<td></td>"))
(td 12)
(defn tr [n] (for [x (range n)] (str "<tr>" (td 10) "</tr>")))
(defn td [n] (apply str (for [x (range n)] "<td></td>")))
(td 12)
(defn tr [n] (for [x (range n)] (apply str "<tr>" (td 10) "</tr>")))
(tr 5)
(defn tr [r d] (for [x (range r)] (apply str "<tr>" (td d) "</tr>")))
(tr 2 2)
(use 'dom)
(use 'dom.dom)
(wat)
(use 'dom.dom :reload)
(wat)
(td
)
(td 2)
(td 1)
(td 0)
(use 'dom.dom :reload)
(td 1)
(td 0)
(use 'dom.dom :reload)
(td 0)
(td 1)
(td 2)
(td 3)
(println (td 3))
(println (td 0))
(rand-int 3)
(map td (take 10 (repeatedly (rand-int 4))))
(map td (take 10 (repeatedly #(rand-int 4))))
(take 10 (repeatedly #(rand-int 4)))
(use 'dom.dom :reload)
(take 10 (repeatedly #(rand-int 4)))
(take 10 (repeatedly #(rand-int 6)))
((take 10 (repeatedly #(rand-int 6)))
)
(take 10 (repeatedly #(rand-int 6)))
(filter (partial <= 3) (take 10 (repeatedly #(rand-int 6))))
(filter (partial < 3) (take 10 (repeatedly #(rand-int 6))))
(filter (partial > 3) (take 10 (repeatedly #(rand-int 6))))
(filter (partial >= 3) (take 10 (repeatedly #(rand-int 6))))
(count (filter (partial >= 3) (take 10 (repeatedly #(rand-int 6)))))
(filter (partial >= 3) (take 10 (repeatedly #(rand-int 6)))))
(filter (partial >= 3) (take 10 (repeatedly #(rand-int 6))))
(use 'dom.dom :reload)
(tds 2)
(tds 3)
(> 5 2)
(use 'dom.dom :reload)
(tds 3)
(use 'dom.dom :reload)
(tds 3)
(use 'dom.dom :reload)
(tds 3)
(partial <=2)
(partial <= 2)
((partial <= 2) 3)
((partial >= 2) 3)
((partial >= 2) 2)
((partial >= 2) 1)
((partial >= 2) 0)
(use 'dom.dom :reload)
(wat)
(use 'dom.dom :reload)
(wat)
(use 'dom.dom :reload)
(wat)
(use 'dom.dom :reload)
(wat 3)
(use 'dom.dom :reload)
(wat 3)
(use 'dom.dom :reload)
(wat 3)
(wat 4)
(wat )
(wat 3)
(use 'dom.dom :reload)
(wat 3)
(use 'dom.dom :reload)
(wat 3)
(use 'dom.dom :reload)
(wat 3)
{:a 4 :b 5}
({:a 4 :b 5} :b)
(:b {:a 4 :b 5})
(use 'dom.dom :reload)
(table 5 5)
(row 3)
(row 4)
(row 5)
(table 5 5)
(use 'dom.dom :reload)
(table 5 5)
(use 'dom.dom :reload)
(table 5 5)
(println (table 5 5))
(use 'dom.dom :reload)
(println (table 5 5))
(use 'dom.dom :reload)
(println (table 5 5))
